========== 도커 설치 ==========

# 1. 서버와 데이터 송수신(요청 및 응답)하기 위한 패키지 curl 설치
goodee@server1:~$ sudo apt install -y curl



# 2. 도커 설치 스크립트를 요청한 뒤 곧바로 실행
goodee@server1:~$ curl -s https://get.docker.com | sudo sh
# Executing docker install script, commit: 5c8855edd778525564500337f5ac4ad65a0c168e
+ sh -c apt-get -qq update >/dev/null
...



# 3. 도커 버전 확인
goodee@server1:~$ docker -v
Docker version 28.4.0, build d8eb465



# 4. 시스템에 존재하는 그룹 확인하기 (설치된 docker 그룹 확인을 위함)
goodee@server1:~$ tail /etc/group
crontab:x:112:
syslog:x:113:
uuidd:x:114:
tcpdump:x:115:
tss:x:116:
landscape:x:117:
fwupd-refresh:x:118:
goodee:x:1000:
mysql:x:119:
docker:x:999:  ## docker(그룹명):x(비밀번호):999(그룹ID):empty(그룹에속한사용자)  :  현재 docker 그룹에 속한 사용자가 없음



# 5. 현재 사용자($USER == goodee)를 docker 그룹에 추가하기
goodee@server1:~$ sudo usermod -aG docker $USER



# 6. docker 그룹에 추가되었는지 확인
goodee@server1:~$ tail -1 /etc/group
docker:x:999:goodee



# 7. 변경된 내용 적용 (이제 모든 docker 명령은 sudo 없이 처리 가능)
goodee@server1:~$ newgrp docker



========== 도커 이미지 ==========

# 1. tomcat 도커 이미지 내려 받기 (태그가 없으면 최신 버전을 받음)
##### docker image pull <레파지토리>/<이미지>:<태그>
##### 디폴트 <레파지토리> : docker.io/library  (docker hub를 의미함)
##### 디폴트 <태그>       : lastest  (최신 버전을 의미함)

goodee@server1:~$ docker image pull tomcat  ## 실제 내려 받은 이미지는 docker.io/library/tomcat:latest



# 2. 도커 이미지 목록 보기
##### docker image ls
##### docker image ls -aq (이미지ID만 보기)
##### docker images  (동일 명령)

goodee@server1:~$ docker image ls
REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
tomcat       latest    bb9b6342d7e5   4 weeks ago   468MB



# 3. 도커 이미지 지우기
##### docker image rm <이미지명>
##### docker image rm <이미지ID>
   -> docker image rm $(docker images -aq) 명령으로 모든 이미지 삭제 가능
##### docker rmi  (동일 명령)
   -> docker rmi $(docker images -aq) 가능

goodee@server1:~$ docker image rm tomcat:latest
  또는
goodee@server1:~$ docker image rm bb9b6342d7e5



# 4. tomcat 9.0 도커 이미지 내려 받기 (태그를 지정하면 원하는 버전을 받을 수 있음)
goodee@server1:~$ docker image pull tomcat:9.0
9.0: Pulling from library/tomcat
76249c7cd503: Pull complete
45cd6ad53cb0: Pull complete
6c2450e7acc8: Pull complete
48861495ffdc: Pull complete
cee05d3a8171: Pull complete
d61a0aa4cb5d: Pull complete
4f4fb700ef54: Pull complete
0117db5eab79: Pull complete
Digest: sha256:102a4b6ec311b8e77bab80cb1bef1f8beae0cc2f9d606a7175e1d56b91f29666
Status: Downloaded newer image for tomcat:9.0
docker.io/library/tomcat:9.0



# 5. tomcat 최신 이미지 내려 받기
goodee@server1:~$ docker image pull tomcat
Using default tag: latest
latest: Pulling from library/tomcat
76249c7cd503: Already exists  ## 도커 이미지는 레이어로 구성. 직전에 tomcat 9.0을 받을 때 이미 받아 놓은 레이어를 재활용하기 때문에 공간을 효율적으로 사용함
45cd6ad53cb0: Already exists  ## (상동)
6c2450e7acc8: Already exists  ## (상동)
48861495ffdc: Already exists  ## (상동)
cee05d3a8171: Already exists  ## (상동)
eb8293c1181d: Pull complete
4f4fb700ef54: Pull complete
c7b9951d1d61: Pull complete
Digest: sha256:1aba80a834270f141502e1edd7ea9e4165b5d412a343b802f21b59523659123a
Status: Downloaded newer image for tomcat:latest
docker.io/library/tomcat:latest



========== 도커 컨테이너 ==========

# 1. 도커 컨테이너 만들기
##### docker container create <이미지>  (컨테이너 이름이 없으면 "형용사_사람이름"(친절한_금자) 형식의 이름이 랜덤으로 생성됨)
##### docker container create --name <컨테이너명> <이미지>
   -> 이미지가 없는 경우 이미지 내려 받기(docker image pull)를 자동으로 수행

goodee@server1:~$ docker container create tomcat



# 2. 도커 컨테이너 목록 보기
##### docker container ls     : 실행 중인 컨테이너 확인
##### docker container ls -a  : 모든 컨테이너 확인
##### docker container ls -aq : 모든 컨테이너 ID 확인
##### docker ps (docker container ls와 동일 명령)
   -> docker ps -a 가능
   -> docker ps -aq 가능

goodee@server1:~$ docker container ls -a
CONTAINER ID   IMAGE        COMMAND             CREATED              STATUS    PORTS     NAMES
90b30fc167bc   tomcat:9.0   "catalina.sh run"   About a minute ago   Created             hopeful_lichterman
9b37920c5cd0   tomcat       "catalina.sh run"   3 minutes ago        Created             ecstatic_saha



# 3. 도커 컨테이너 삭제
goodee@server1:~$ docker container rm hopeful_lichterman
hopeful_lichterman
goodee@server1:~$ docker container rm 9b37920c5cd0
9b37920c5cd0



# 4. 컨테이너 이름 지정해서 만들기
goodee@server1:~$ docker container create --name tomcat-container tomcat:9.0
f0e9f05bec568cd078e59bba7708ce5c0393960337390f35b0a9b1f9ce6217b7



# 5. 확인
goodee@server1:~$ docker container ls -a
CONTAINER ID   IMAGE        COMMAND             CREATED         STATUS    PORTS     NAMES
f0e9f05bec56   tomcat:9.0   "catalina.sh run"   8 seconds ago   Created             tomcat-container


# 6. 컨테이너 시작
##### docker container start <컨테이너명>
##### docker container start <컨테이너ID>

goodee@server1:~$ docker container start tomcat-container



# 7. 실행 중인 컨테이너는 상태(STATUS)가 Up임
goodee@server1:~$ docker container ls
CONTAINER ID   IMAGE        COMMAND             CREATED         STATUS          PORTS      NAMES
f0e9f05bec56   tomcat:9.0   "catalina.sh run"   2 minutes ago   Up 13 seconds   8080/tcp   tomcat-container



# 8. 컨테이너 중지
##### docker container stop <컨테이너명>
##### docker container stop <컨테이너ID>
   -> docker container stop $(docker ps -aq) 명령으로 일괄 중지 가능

goodee@server1:~$ docker container stop tomcat-container



# 9. 컨테이너 삭제
##### docker container rm <컨테이너명>
##### docker container rm <컨테이너ID>
   -> docker container rm $(docker ps -aq) 명령으로 일괄 삭제 가능

goodee@server1:~$ docker container rm tomcat-container



# 10. 컨테이너 실행
##### docker container run <이미지>
   -> docker image pull + docker container create + docker container start 동시에 자동 진행
##### -d                             : 백그라운드 실행
##### --name <컨테이너명>            : 컨테이너 이름 지정
##### -p <호스트포트>:<컨테이너포트> : 호스트포트와 컨테이너포트 연결
##### -v <도커볼륨>:<컨테이너경로>   : 볼륨 마운트
##### -v <호스트경로>:<컨테이너경로> : 바인드 마운트
##### -e <환경변수>=<값>             : 환경변수
##### -rm                            : 컨테이너 중지(stop)시 자동으로 컨테이너 삭제

goodee@server1:~$ docker run -d --name nginx-container nginx
9982408020b9964a939f76805fd9eb7379f8e54ffae01c67ddfed8bfcd282dab



# 11. 컨테이너 실행 확인
goodee@server1:~$ docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES
9982408020b9   nginx     "/docker-entrypoint.…"   51 seconds ago   Up 50 seconds   80/tcp    nginx-container



# 12. 컨테이너 삭제 연습
goodee@server1:~$ docker rm nginx-container



# 13. 톰캣 컨테이너 실행
goodee@server1:~$ docker run -d --name tomcat-container -p 8080:8080 tomcat:9.0
99e676ace34f16e4e3ad88e37cf85f7ffaf84e28763d65af9190f0f1fe5ae79f



# 14. 톰캣 컨테이너 조작하기
##### docker exec <옵션> <컨테이너> <명령>
   -> 예시) docker exec <컨테이너> ls -al : 컨테이너에서 단순 ls -al 명령 실행하기

goodee@server1:~$ docker exec -it tomcat-container bash  (-it 옵션으로 컨테이너 실행 후 대화형 터미널(주로 bash) 열기)
root@52ae7c0a0481:/usr/local/tomcat# ls
bin              lib             README.md      webapps
BUILDING.txt     LICENSE         RELEASE-NOTES  webapps.dist
conf             logs            RUNNING.txt    work
CONTRIBUTING.md  native-jni-lib  temp
filtered-KEYS    NOTICE          upstream-KEYS
root@52ae7c0a0481:/usr/local/tomcat# cd webapps
root@52ae7c0a0481:/usr/local/tomcat/webapps# ll
total 12
drwxr-xr-x 2 root root 4096 Sep  2 00:15 ./
drwxr-xr-x 1 root root 4096 Sep  2 00:15 ../
root@52ae7c0a0481:/usr/local/tomcat/webapps# mkdir ROOT  (ROOT 디렉터리에 index.html 배치하면 톰캣 실행 시 확인 가능)
root@52ae7c0a0481:/usr/local/tomcat/webapps# exit
exit



# 15. 컨테이너 파일 복사
##### docker container cp <호스트경로> <컨테이너명>:<컨테이너경로> (Host -> Container)
##### docker container cp <컨테이너명>:<컨테이너경로> <호스트경로> (Container -> Host)

goodee@server1:~$ docker cp ~/index.html tomcat-cont:/usr/local/tomcat/webapps/ROOT/index.html  (~/index.html은 nano를 이용해 간단히 만든 상태)
Successfully copied 2.05kB to tomcat-cont:/usr/local/tomcat/webapps/ROOT/index.html



# 16. 브라우저로 접속 확인
##### http://192.168.56.1:8080